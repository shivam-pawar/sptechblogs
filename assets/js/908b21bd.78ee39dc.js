"use strict";(self.webpackChunksptechblogs=self.webpackChunksptechblogs||[]).push([[5427],{5653:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"publish-react-app-to-azure-static-web-app-using-azure-devops","metadata":{"permalink":"/sptechblogs/blog/publish-react-app-to-azure-static-web-app-using-azure-devops","editUrl":"https://github.com/shivam-pawar/sptechblogs/tree/master/blog/2025-04-06-deploy-react-app-on-azure-swa.md","source":"@site/blog/2025-04-06-deploy-react-app-on-azure-swa.md","title":"How to Publish Your React App on Azure Static Web App Using Azure CI/CD","description":"Step-by-step guide to deploy a React app to Azure Static Web Apps using Azure DevOps Repos and Pipelines \u2014 without using GitHub. Ideal for beginners with simple language and clear instructions.","date":"2025-04-06T00:00:00.000Z","formattedDate":"April 6, 2025","tags":[{"label":"React","permalink":"/sptechblogs/blog/tags/react"},{"label":"Vite","permalink":"/sptechblogs/blog/tags/vite"},{"label":"Azure","permalink":"/sptechblogs/blog/tags/azure"},{"label":"DevOps","permalink":"/sptechblogs/blog/tags/dev-ops"},{"label":"Static Web Apps","permalink":"/sptechblogs/blog/tags/static-web-apps"},{"label":"SWA","permalink":"/sptechblogs/blog/tags/swa"},{"label":"CI/CD","permalink":"/sptechblogs/blog/tags/ci-cd"},{"label":"Azure Repos","permalink":"/sptechblogs/blog/tags/azure-repos"},{"label":"Azure Pipelines","permalink":"/sptechblogs/blog/tags/azure-pipelines"}],"readingTime":3.625,"hasTruncateMarker":true,"authors":[{"name":"Shivam Pawar","title":"Senior Software Developer @Emtec Inc.","url":"https://github.com/shivam-pawar/","imageURL":"https://github.com/shivam-pawar.png","key":"shivam-pawar"}],"frontMatter":{"slug":"publish-react-app-to-azure-static-web-app-using-azure-devops","title":"How to Publish Your React App on Azure Static Web App Using Azure CI/CD","description":"Step-by-step guide to deploy a React app to Azure Static Web Apps using Azure DevOps Repos and Pipelines \u2014 without using GitHub. Ideal for beginners with simple language and clear instructions.","authors":"shivam-pawar","tags":["React","Vite","Azure","DevOps","Static Web Apps","SWA","CI/CD","Azure Repos","Azure Pipelines"]},"nextItem":{"title":"Improve your JavaScript Code Part - 1","permalink":"/sptechblogs/blog/improve-your-js-code-part-1"}},"content":"Are you building a React app and want to publish it using Azure? This guide will walk you through deploying your React app to **Azure Static Web Apps** using **Azure DevOps Repos** and **Azure Pipelines** \u2014 without GitHub.\\r\\n\\r\\nEven if you\'re a beginner, don\u2019t worry. I\u2019ll guide you step-by-step, just like a teacher explaining things in a classroom. \ud83d\ude0a\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n---\\r\\n\\r\\n## Pre-requisites\\r\\n\\r\\nBefore we begin, make sure you have the following:\\r\\n\\r\\n1. **A React App** (using Vite for fast development)\\r\\n   ```bash\\r\\n   npm create vite@latest\\r\\n   cd <your_app_name>\\r\\n   ```\\r\\n\\r\\n2. **Azure Account**  \\r\\n   Sign up for free: [https://azure.microsoft.com/free](https://azure.microsoft.com/free)\\r\\n\\r\\n3. **Azure DevOps Account**  \\r\\n   Create one at: [https://dev.azure.com](https://dev.azure.com)\\r\\n\\r\\n---\\r\\n\\r\\n## Step 1: Push Your Code to Azure Repos\\r\\n\\r\\n1. Go to [https://dev.azure.com](https://dev.azure.com)\\r\\n2. Create a **new project**\\r\\n3. Navigate to **Repos** > **Clone** and copy the Git URL\\r\\n4. In your terminal, run the following commands:\\r\\n\\r\\n```bash\\r\\ngit init\\r\\ngit remote add origin https://dev.azure.com/YOUR_ORG/YOUR_PROJECT/_git/YOUR_REPO\\r\\ngit add .\\r\\ngit commit -m \\"Initial commit\\"\\r\\ngit push -u origin main\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Step 2: Create a Static Web App on Azure\\r\\n\\r\\n1. Go to the [Azure Portal](https://portal.azure.com)\\r\\n2. Search for **Static Web Apps** and click **Create**\\r\\n\\r\\n   ![Search Static Web Apps](../static/img/static_web_app_search.png \\"Search Static Web Apps\\")\\r\\n\\r\\n3. Fill out the form:\\r\\n   - **Subscription**: Choose your Azure subscription\\r\\n   - **Resource Group**: Create or select an existing one\\r\\n   - **Name**: Enter a unique name\\r\\n   - **Region**: Pick a region near your users\\r\\n   - **Deployment Details**: Choose **Other** for source control\\r\\n\\r\\n   ![Review and Create](../static/img/review_create.png \\"Review and Create\\")\\r\\n\\r\\n4. Click **Review + Create** and then **Create**\\r\\n\\r\\n   ![Create Static Web App](../static/img/create_swa.png \\"Create Static Web App\\")\\r\\n\\r\\n5. Once deployed, click **Go to Resource**\\r\\n\\r\\n   ![Go to Resource](../static/img/go_to_resource.png \\"Go to Resource\\")\\r\\n\\r\\n---\\r\\n\\r\\n## Step 3: Set Up Azure Pipeline for CI/CD\\r\\n\\r\\n1. In Azure DevOps, go to your project\\r\\n2. Click on **Pipelines** > **Create Pipeline**\\r\\n3. Choose **Azure Repos Git** as your source\\r\\n4. Select your repo\\r\\n5. Choose **Starter Pipeline** and replace the YAML with:\\r\\n\\r\\n```yaml\\r\\ntrigger:\\r\\n  branches:\\r\\n    include:\\r\\n      - master\\r\\n      - main\\r\\n\\r\\npool:\\r\\n  vmImage: ubuntu-latest\\r\\n\\r\\nsteps:\\r\\n  - task: NodeTool@0\\r\\n    inputs:\\r\\n      versionSpec: \'22.x\'\\r\\n    displayName: \'Install Node.js\'\\r\\n\\r\\n  - script: |\\r\\n      npm install\\r\\n      npm run build\\r\\n    displayName: \'Build React App\'\\r\\n\\r\\n  - task: AzureStaticWebApp@0\\r\\n    inputs:\\r\\n      app_location: \'/\'\\r\\n      output_location: \'dist\'\\r\\n      azure_static_web_apps_api_token: $(deployment_token)\\r\\n```\\r\\n\\r\\n6. Click **Save and run**\\r\\n\\r\\n---\\r\\n\\r\\n## Step 4: Add Deployment Token to Pipeline\\r\\n\\r\\nThe deployment token authorizes your pipeline to deploy to Azure.\\r\\n\\r\\n1. In the Azure Portal, open your **Static Web App**\\r\\n2. Under **Settings**, click **Manage Deployment Token**\\r\\n\\r\\n   ![Manage Deployment Token](../static/img/manage_deployment_token.png \\"Manage Deployment Token\\")\\r\\n\\r\\n3. Copy the token\\r\\n\\r\\nIn Azure DevOps:\\r\\n\\r\\n1. Go to **Pipelines** > **Library**\\r\\n2. Create a new **Variable Group**\\r\\n3. Add a variable:\\r\\n   - **Name**: `deployment_token`\\r\\n   - **Value**: *Paste the token you copied*\\r\\n   - **Keep this value secret**: \u2714\ufe0f\\r\\n\\r\\n   ![Create Variable Group](../static/img/variable_group.png \\"Create Variable Group\\")\\r\\n\\r\\n4. Link this variable group to your pipeline by adding it to your YAML file:\\r\\n\\r\\n```yaml\\r\\nvariables:\\r\\n  - group: <YOUR_VARIABLE_GROUP_NAME>\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n## Final `azure-pipelines.yml` File (With Token Variable Group)\\r\\n\\r\\n```yaml\\r\\ntrigger:\\r\\n  branches:\\r\\n    include:\\r\\n      - master\\r\\n      - main\\r\\n\\r\\npool:\\r\\n  vmImage: ubuntu-latest\\r\\n\\r\\nvariables:\\r\\n  - group: react-vite-app\\r\\n\\r\\nsteps:\\r\\n  - task: NodeTool@0\\r\\n    inputs:\\r\\n      versionSpec: \'22.x\'\\r\\n    displayName: \'Install Node.js\'\\r\\n\\r\\n  - script: |\\r\\n      npm install\\r\\n      npm run build\\r\\n    displayName: \'Build React App\'\\r\\n\\r\\n  - task: AzureStaticWebApp@0\\r\\n    inputs:\\r\\n      app_location: \'/\'\\r\\n      output_location: \'dist\'\\r\\n      azure_static_web_apps_api_token: $(deployment_token)\\r\\n```\\r\\n> \u2139\ufe0f  With the `trigger` configuration, the pipeline will automatically run every time new code is pushed to the `main` or `master` branch.\\r\\n---\\r\\n\\r\\n## Step 5: Access Your Live Web App\\r\\n\\r\\n1. Go to the [Azure Portal](https://portal.azure.com)\\r\\n2. Open your **Static Web App** resource\\r\\n3. Copy the **URL** from the overview page\\r\\n\\r\\n   ![Open Deployed App](../static/img/open_url.png \\"Open Deployed App\\")\\r\\n\\r\\n4. Open the URL in your browser to see your deployed React app live! \ud83c\udf89\\r\\n\\r\\n---\\r\\n\\r\\n## Summary\\r\\n\\r\\nHere\'s a recap of what you did:\\r\\n\\r\\n- Created and pushed a React app to Azure Repos\\r\\n- Created a Static Web App on Azure\\r\\n- Set up a CI/CD pipeline using Azure Pipelines\\r\\n- Used a secure deployment token to publish your app\\r\\n- Launched and verified your deployed site\\r\\n\\r\\nYou\u2019ve now published your first React app to Azure without using GitHub! Keep building, keep exploring.\\r\\n\\r\\n> If you found this article useful, please share it with your friends and colleagues!\u2764\ufe0f\\r\\n\\r\\nRead more articles on \u27a1\ufe0f [Dev.To](https://dev.to/shivampawar)\\r\\n\\r\\nFollow me on \u2935\ufe0f\\r\\n\\r\\n<p align=\\"left\\">\\r\\n  <a href=\\"https://dev.to/shivampawar\\">\\r\\n    <img src=\\"https://skillicons.dev/icons?i=devto\\" />\\r\\n  </a>\\r\\n  <a href=\\"https://www.linkedin.com/in/shivam-prakash-pawar\\">\\r\\n    <img src=\\"https://skillicons.dev/icons?i=linkedin\\" />\\r\\n  </a>\\r\\n  <a href=\\"https://github.com/shivam-pawar\\">\\r\\n    <img src=\\"https://skillicons.dev/icons?i=github\\" />\\r\\n  </a>\\r\\n</p>"},{"id":"improve-your-js-code-part-1","metadata":{"permalink":"/sptechblogs/blog/improve-your-js-code-part-1","editUrl":"https://github.com/shivam-pawar/sptechblogs/tree/master/blog/2022-12-09-improve-your-js-code-1.md","source":"@site/blog/2022-12-09-improve-your-js-code-1.md","title":"Improve your JavaScript Code Part - 1","description":"Learn how to improve your JavaScript code by avoiding bulky and nested if-else statements, using alternative techniques for better readability and performance.","date":"2022-12-09T00:00:00.000Z","formattedDate":"December 9, 2022","tags":[{"label":"JavaScript","permalink":"/sptechblogs/blog/tags/java-script"},{"label":"tricks","permalink":"/sptechblogs/blog/tags/tricks"},{"label":"alternative","permalink":"/sptechblogs/blog/tags/alternative"},{"label":"programming","permalink":"/sptechblogs/blog/tags/programming"}],"readingTime":2.39,"hasTruncateMarker":true,"authors":[{"name":"Shivam Pawar","title":"Senior Software Developer @Emtec Inc.","url":"https://github.com/shivam-pawar/","imageURL":"https://github.com/shivam-pawar.png","key":"shivam-pawar"}],"frontMatter":{"slug":"improve-your-js-code-part-1","title":"Improve your JavaScript Code Part - 1","description":"Learn how to improve your JavaScript code by avoiding bulky and nested if-else statements, using alternative techniques for better readability and performance.","authors":"shivam-pawar","tags":["JavaScript","tricks","alternative","programming"]},"prevItem":{"title":"How to Publish Your React App on Azure Static Web App Using Azure CI/CD","permalink":"/sptechblogs/blog/publish-react-app-to-azure-static-web-app-using-azure-devops"},"nextItem":{"title":"Setup React Application using Typescript and Webpack","permalink":"/sptechblogs/blog/setup-react-app-webpack-typescript"}},"content":"## Avoid too many nested If Else\\r\\n\\r\\nNested if-else statements should be avoided. Maintain the code\'s linearity and simplicity.\\r\\n\\r\\nConsider using an if-else statement that is nested and does not take advantage of the power of the return statement.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n```js\\r\\nfunction getNameById(id) {\\r\\n  if (id === \\"M57\\") {\\r\\n    return \\"Harry\\";\\r\\n  } else if (id === \\"U11\\") {\\r\\n    return \\"Prince\\";\\r\\n  } else if (id === \\"S57\\") {\\r\\n    return \\"Jack\\";\\r\\n  } else if (id === \\"G46\\") {\\r\\n    return \\"John\\";\\r\\n  } else if (id === \\"B93\\") {\\r\\n    return \\"Scott\\";\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nThe code above needs to be refactored in order to increase performance, and many people are considering using switch case statements. However, let me share one tricky technique to handle this type of code in order to take performance improvement into consideration.\\r\\n\\r\\nYou just need to create one object with key as a condition of if statement and value as return statement of if.\\r\\n\\r\\n```js\\r\\nconst nameIdMap = {\\r\\n  M57: \\"Harry\\",\\r\\n  U11: \\"Prince\\",\\r\\n  S57: \\"Jack\\",\\r\\n  G46: \\"John\\",\\r\\n  B93: \\"Scott\\",\\r\\n};\\r\\n\\r\\nfunction getNameById(id) {\\r\\n    return nameIdMap[id];\\r\\n}\\r\\n```\\r\\n\\r\\nThe code above is more readable and flexible.\\r\\n\\r\\n## Avoid bulky If Else block\\r\\n\\r\\nSuppose you want to check user permissions based on roles and write code like this:\\r\\n\\r\\n```js\\r\\nfunction checkAccess(role) {\\r\\n  if (\\r\\n    role === \\"Admin\\" ||\\r\\n    role === \\"Manager\\" ||\\r\\n    role === \\"Director\\" ||\\r\\n    role === \\"Owner\\"\\r\\n  ) {\\r\\n    return true;\\r\\n  } else return false;\\r\\n}\\r\\n```\\r\\n\\r\\nThe above code will obviously work, but we can improve it by using array\'s method.\\r\\n\\r\\nWe will declare one array which contains all the accessible roles and apply includes() method of array.\\r\\n\\r\\n```js\\r\\nallowedAccess = [\\"Admin\\", \\"Manager\\", \\"Director\\", \\"Owner\\"];\\r\\n\\r\\nfunction checkAccess(role) {\\r\\n  return allowedAccess.includes(role);\\r\\n}\\r\\n```\\r\\n\\r\\n## Avoid If Else Use Ternary Operator\\r\\n\\r\\nWe can sometimes reduce the number of lines of code by using the ternary operator.\\r\\n\\r\\nSuppose you want to refactor this code with ternary operators. Here\'s a simple example.\\r\\n\\r\\n```js\\r\\nfunction checkResult(marks) {\\r\\n  if (marks >= 50) {\\r\\n    return \\"Pass\\";\\r\\n  } else {\\r\\n    return \\"Fail\\";\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nWe can re-write this code as:\\r\\n\\r\\n```js\\r\\nfunction checkResult(marks) {\\r\\n  return marks >= 50 ? \\"Pass\\" : \\"Fail\\";\\r\\n}\\r\\n```\\r\\n\\r\\n## Avoid If Else when return value is Boolean\\r\\n\\r\\nSometime our function return boolean values then in this can we don\'t need if else blocks.\\r\\n\\r\\n```js\\r\\nfunction isValid(value) {\\r\\n  if (value >= 50) {\\r\\n    return true;\\r\\n  } else {\\r\\n    return false;\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nWe can write code like this:\\r\\n\\r\\n```js\\r\\nfunction isValid(value) {\\r\\n  return value >= 50;\\r\\n}\\r\\n```\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nAny programming language must include decision constructs. However, we end up coding a huge number of nested if statements, making our code more complex and difficult to maintain.\\r\\n\\r\\nIn this post, we learned how to use effective design patterns to replace if statements.\\r\\n\\r\\n> If you found this article useful, please share it with your friends and colleagues!\u2764\ufe0f"},{"id":"setup-react-app-webpack-typescript","metadata":{"permalink":"/sptechblogs/blog/setup-react-app-webpack-typescript","editUrl":"https://github.com/shivam-pawar/sptechblogs/tree/master/blog/2022-10-12-setup-react-app-webpack-typescript.md","source":"@site/blog/2022-10-12-setup-react-app-webpack-typescript.md","title":"Setup React Application using Typescript and Webpack","description":"Learn how to configure TypeScript in a React application with Webpack and Babel for better type safety and development efficiency.","date":"2022-10-12T00:00:00.000Z","formattedDate":"October 12, 2022","tags":[{"label":"React.js","permalink":"/sptechblogs/blog/tags/react-js"},{"label":"typescript","permalink":"/sptechblogs/blog/tags/typescript"},{"label":"webpack","permalink":"/sptechblogs/blog/tags/webpack"},{"label":"javascript","permalink":"/sptechblogs/blog/tags/javascript"},{"label":"programming","permalink":"/sptechblogs/blog/tags/programming"}],"readingTime":3.015,"hasTruncateMarker":true,"authors":[{"name":"Shivam Pawar","title":"Senior Software Developer @Emtec Inc.","url":"https://github.com/shivam-pawar/","imageURL":"https://github.com/shivam-pawar.png","key":"shivam-pawar"}],"frontMatter":{"slug":"setup-react-app-webpack-typescript","title":"Setup React Application using Typescript and Webpack","description":"Learn how to configure TypeScript in a React application with Webpack and Babel for better type safety and development efficiency.","authors":"shivam-pawar","tags":["React.js","typescript","webpack","javascript","programming"]},"prevItem":{"title":"Improve your JavaScript Code Part - 1","permalink":"/sptechblogs/blog/improve-your-js-code-part-1"},"nextItem":{"title":"Setup Webpack And Babel for a React JS Application","permalink":"/sptechblogs/blog/setup-react-app-babel-webpack"}},"content":"In this post we will learn how to add support of TypeScript to your React Js application having webpack and babel configured.\\r\\n\\r\\nPlease note that in this post I\u2019m going to modify previously setup React Js application to add support for TypeScript. If you haven\u2019t yet gone through that post then please start with [Setup Webpack and Babel for a React Js](https://dev.to/shivampawar/setup-webpack-and-babel-for-a-react-js-application-24f5) Application and come back to this post.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Why Typescript?\\r\\n\\r\\nAccording to [official documentation](https://www.typescriptlang.org/), TypeScript is a strongly typed superset of JavaScript which uses TypeScript Compiler to compile it into plain JavaScript. TypeScript provide pure Object Oriented implementation to use classes, interfaces and inheritance.\\r\\n\\r\\nTypeScript check error in code at compile time and if any error found, then it shows the mistakes before the script is run. Also it support all existing JavaScript library as it is a superset of JavaScript. It make development quick and easy as possible and developers can save lot of time.\\r\\n\\r\\n## Installations\\r\\n\\r\\nWe need to install some packages which are essential to configure TypeScript in React application.\\r\\n\\r\\nRun below commands to install required packages:\\r\\n\\r\\n```cmd\\r\\nnpm install -D typescript ts-loader @types/node @types/react @types/react-dom\\r\\n```\\r\\n\\r\\n- **typescript** package is main engine for TypeScript.\\r\\n- **ts-loader** is loader for Webpack that integrates TypeScript in Webpack. This will convert files with .ts extension into .js files and bundle it.\\r\\n- **@types/node**, **@types/react** and **@types/react-dom** contains the type definitions required for node, react and react dom.\\r\\n\\r\\n## Configuring Typescript\\r\\n\\r\\nAdd tsconfig.json file to the root directory location where package.json exists. Name should be exact same as mentioned and the below configurations into it.\\r\\n\\r\\n```json\\r\\n//tsconfig.json\\r\\n\\r\\n{\\r\\n  \\"compilerOptions\\": {\\r\\n    \\"outDir\\": \\"./dist/\\",\\r\\n    \\"noImplicitAny\\": true,\\r\\n    \\"module\\": \\"es6\\",\\r\\n    \\"target\\": \\"es5\\",\\r\\n    \\"jsx\\": \\"react\\",\\r\\n    \\"allowJs\\": true,\\r\\n    \\"allowSyntheticDefaultImports\\": true,\\r\\n    \\"moduleResolution\\": \\"Node\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n## Configuring Webpack\\r\\n\\r\\nWebpack need to be configured to have support for TypeScript files. Here is small change you need to add in webpack.config.js\\r\\n\\r\\nAdd ts-loader (loader) and test for **_ts_** and **_tsx_** files.\\r\\n\\r\\n```js\\r\\n//webpack.config.js\\r\\n{\\r\\n   test: /\\\\.tsx?$/,\\r\\n   exclude: /node_modules/,\\r\\n   loader: \'ts-loader\'\\r\\n}\\r\\n```\\r\\n\\r\\nadd Test for **_ts_** and **_tsx_** extension to resolve:\\r\\n\\r\\n```js\\r\\n//webpack.config.js\\r\\n...\\r\\nresolve:\\r\\n{\\r\\n   extensions: [ \'.tsx\', \'.ts\', \'.js\' ],\\r\\n}\\r\\n...\\r\\n```\\r\\n\\r\\nAnd one final change in webpack config is to rename the \\\\_js \\\\_files to \\\\_tsx \\\\_in your react application and update the entry point\\r\\n\\r\\n```js\\r\\n//webpack.config.js\\r\\n...\\r\\nentry: \\"./src/index.tsx\\",\\r\\n...\\r\\n```\\r\\n\\r\\n## Testing Working for Typescript with React\\r\\n\\r\\nTo test the application, we create one component App which will take one prop of type number which will get passed by index.tsx\\r\\n\\r\\n```jsx\\r\\n//index.tsx\\r\\n\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\nimport \\"./style.css\\";\\r\\nimport { App } from \\"./components/App\\";\\r\\n\\r\\nReactDOM.render(<App num={1234} />, document.getElementById(\\"root\\"));\\r\\n```\\r\\n\\r\\n```jsx\\r\\n//components/App.tsx\\r\\n\\r\\nimport React from \\"react\\";\\r\\n\\r\\ntype AppProps = { num: number };\\r\\n\\r\\nexport const App = ({ num }: AppProps) => <h1>Total Number: {num}</h1>;\\r\\n```\\r\\n\\r\\nBoo-yah!\ud83d\ude0d We are all set with TypeScript\u2764\ufe0f.\\r\\n\\r\\n![Demo](../static/img/react-typesript-webpack.png \\"Demo\\")\\r\\n\\r\\nNow just try to change the value which we were passing through props.\\r\\n\\r\\nFor example I\u2019ll just change number 1234 to string \u201c1234\u201d and check what will happen.\\r\\n\\r\\n![error-message](../static/img/error-message.png \\"error-message\\")\\r\\n\\r\\nAs expected, Intellisense will show error like this so that we will identify it before building application. Isn\u2019t it a great thing!\\r\\n\\r\\nAlso if we try to build it, command prompt will show error like this:\\r\\n\\r\\n![error-console](../static/img/error-console.png \\"error-console\\")\\r\\n\\r\\nError are self explanatory so that we can easily identify mistakes and correct it.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nIn this blog post we successfully configured TypeScript with React application and tested if it works properly or not.\\r\\n\\r\\n> If you found this article useful, please share it with your friends and colleagues!\u2764\ufe0f\\r\\n\\r\\nThis article was originally published [here](https://dev.to/shivampawar/setup-react-application-using-typescript-and-webpack-2kn6)"},{"id":"setup-react-app-babel-webpack","metadata":{"permalink":"/sptechblogs/blog/setup-react-app-babel-webpack","editUrl":"https://github.com/shivam-pawar/sptechblogs/tree/master/blog/2022-10-09-setup-babel-webpack-react.md","source":"@site/blog/2022-10-09-setup-babel-webpack-react.md","title":"Setup Webpack And Babel for a React JS Application","description":"Learn how to set up Webpack and Babel for a React JS application with step-by-step instructions.","date":"2022-10-09T00:00:00.000Z","formattedDate":"October 9, 2022","tags":[{"label":"JavaScript","permalink":"/sptechblogs/blog/tags/java-script"},{"label":"webpack","permalink":"/sptechblogs/blog/tags/webpack"},{"label":"reactjs","permalink":"/sptechblogs/blog/tags/reactjs"},{"label":"babel","permalink":"/sptechblogs/blog/tags/babel"},{"label":"programming","permalink":"/sptechblogs/blog/tags/programming"}],"readingTime":6.07,"hasTruncateMarker":true,"authors":[{"name":"Shivam Pawar","title":"Senior Software Developer @Emtec Inc.","url":"https://github.com/shivam-pawar/","imageURL":"https://github.com/shivam-pawar.png","key":"shivam-pawar"}],"frontMatter":{"slug":"setup-react-app-babel-webpack","title":"Setup Webpack And Babel for a React JS Application","description":"Learn how to set up Webpack and Babel for a React JS application with step-by-step instructions.","authors":"shivam-pawar","tags":["JavaScript","webpack","reactjs","babel","programming"]},"prevItem":{"title":"Setup React Application using Typescript and Webpack","permalink":"/sptechblogs/blog/setup-react-app-webpack-typescript"},"nextItem":{"title":"FIX - replaceAll() is not a Function In JavaScript","permalink":"/sptechblogs/blog/replaceAll-in-javascript"}},"content":"## Introduction\\r\\n\\r\\nAs a beginner in React.js, I used to setting up my react application using a single command line tool called create-react-app (CRA) which is a open source project developed by developers at Facebook for bootstrapping your react application and serve a simple boilerplate. But as a developer I\u2019m always curious to understand what actually this command does ? What are the other dependencies required to serve a react application ? As a beginner I was thinking like react-scripts is the only dependency that required to build and run react app. But as I drill down more in React I get to know more about transpiler and bundler.\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nI get to know that there were various ways to create a React app. create-react-app is abstract way of creating a react app as it hide all the configurations and not provide us a flexibility to add a custom build configs. So I moved to configure Webpack and Babel by my own configuration which is actually used in create-react-app but it\u2019s configuration is abstract.\\r\\n\\r\\nI\u2019m assuming that you know about React.js and you are here to learn configuration of Webpack and Babel in your project.\\r\\n\\r\\n## Why do we use Babel?\\r\\nWell answer is simple enough, Our browser is not compatible for the latest ECMAScript syntax and hence Babel will help us to trans-compile (transpile) latest ECMAScript syntax into ES5 or ES6 code which is browser compatible or transform code into backward compatibility.\\r\\n\\r\\nIf you don\u2019t want to use Babel, you need to have knowledge of ES5 or ES6 syntax for React.js app development.\\r\\n\\r\\n## What exactly is webpack?\\r\\n\\r\\nIn simple word, Webpack is a bundler of your application. In your project you are likely to create many components and these components will be written in separate files right !. Now imagine the case, you have 10 components in you app and that\u2019s why obviously 10 script files. Now if you want to deploy you application, you need to keep track of all these files and also their dependencies. So, here Webpack will come in picture.\\r\\n\\r\\nWebpack will keep track of your all files and create a dependency graph for you application and most probably create a single file which will bundle all your files along with you dependencies. Isn\u2019t it a great thing!\\r\\n\\r\\n## Creating a folder structure\\r\\n\\r\\nNow we will see how to maintain files in folders. This structure may be get vary according to you choice. I\u2019ll show you structure which I personally prefer. Choice is yours!\\r\\n\\r\\n1. Create a folder and name it as per your application name.\\r\\n2. Open folder in command prompt (cmd).\\r\\n3. Run the following command in cmd:\\r\\n\\r\\n```cmd\\r\\nnpm init\\r\\n```\\r\\n1. This will ask you some basic information like package name, author name. description, and license. With this info it will create a file called package.json\\r\\n2. Create a src folder inside your project folder and add empty files named as index.js and index.html and create two config files at your project level called .babelrc and webpack.config.js like this:\\r\\n\\r\\n![folder-structure](../static/img/folder-structure.png \\"folder-structure\\")\\r\\n\\r\\n**Note:** File name for .babelrc and webpack.config.js should be exactly same as mentioned.\\r\\n\\r\\n## Installations\\r\\n\\r\\nNow we need to install some packages which are essentially required for configuring React application with Babel and Webpack.\\r\\n\\r\\n1. Install our main dependency package, React and React DOM.\\r\\n\\r\\n```cmd\\r\\nnpm i -S react react-dom\\r\\n```\\r\\n2. Install Babel as a dev dependency for your application.\\r\\n\\r\\n```cmd\\r\\nnpm i -D babel-core babel-loader babel-preset-env babel-preset-react\\r\\n```\\r\\n* **babel-core**: It is the main engine package for the babel.\\r\\n* **babel-loader**: Loader will transpiles the react JSX code in backward compatible js code with the help of babel and webpack.\\r\\n* **babel-preset-env**: Add support to ES5/ES6 JavaScript.\\r\\n* **babel-preset-react**: Add support for React JSX code. \\r\\n\\r\\n**Note**: babel-loader8.* requires babel7.. If you\u2019d like to use babel6.. You should install babel-loader.7.*\\r\\n\\r\\n```cmd\\r\\nnpm install --save-dev babel-loader@7.0.0\\r\\n```\\r\\nOR\\r\\n\\r\\n```cmd\\r\\nnpm install --save-dev @babel/core\\r\\n```\\r\\n1. Install Webpack as a dev dependency for your application.\\r\\n\\r\\n```cmd\\r\\nnpm i -D webpack webpack-cli webpack-dev-server html-webpack-plugin\\r\\n```\\r\\n* **webpack**: Main engine for the webpack plugins.\\r\\n* **webpack-cli**: Provides a command line tool for setting up webpack and it\u2019s plugins.\\r\\n* **webpack-dev-server**: This will help us to develop a live server for your application.\\r\\n* **html-webpack-plugin**: Help to create a HTML template for your application.\\r\\n\\r\\nThese are the minimal required packages which you need to install. Now, let\u2019s move for adding configurations in config files.\\r\\n\\r\\n## Configuring Babel\\r\\n\\r\\nIn ._babelrc_ file we will define the presets which we will be using in your application.\\r\\n\\r\\nPaste the below content in your _.babelrc_\\r\\n\\r\\n```json\\r\\n{\\"presets\\":[\\"env\\", \\"react\\"]}\\r\\n```\\r\\n\\r\\n## Configuring Webpack\\r\\n\\r\\nIn _webpack.config.js_ you need to add following configs\\r\\n\\r\\n```js\\r\\n//webpack.config.js\\r\\nconst path = require(\'path\');\\r\\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\\r\\nmodule.exports = {\\r\\n   entry: \'./src/index.js\',\\r\\n   output: {\\r\\n      path: path.join(__dirname, \'/dist\'),\\r\\n      filename: \'bundle.js\'\\r\\n   },\\r\\n   devServer: {\\r\\n      port: 8080\\r\\n   },\\r\\n   module: {\\r\\n      rules: [\\r\\n         {\\r\\n            test: /\\\\.jsx?$/,\\r\\n            exclude: /node_modules/,\\r\\n            loader: \'babel-loader\',\\r\\n         },\\r\\n         {\\r\\n            test: /\\\\.css$/,\\r\\n            use: [ \'style-loader\', \'css-loader\' ]\\r\\n        }\\r\\n      ]\\r\\n   },\\r\\n   plugins:[\\r\\n       new HtmlWebpackPlugin({\\r\\n            template: path.join(__dirname,\'/src/index.html\')\\r\\n       }) \\r\\n   ]\\r\\n}\\r\\n```\\r\\n* **entry**: Here we will define entry point of our application. From this point webpack will start bundling.\\r\\n* **output**: We will define the location where the bundled file will reside. i.e., at /dist/bundle.js\\r\\n* **devServer**: Here development server related configurations present like we provided port number 8080 for development server.\\r\\n* **test**: We define some regular expression that define which files will pass through which loader.\\r\\n* **exclude**: Define files that should be excluded by loader.\\r\\n* **loader**: Define the loaders here which we are going to use.\\r\\n\\r\\n## Setting Scripts in _package.json_\\r\\n\\r\\nWe require some script command to run and build application, for that we need to define some script in package.json.\\r\\n\\r\\n```json\\r\\n\\"start\\": \\"webpack serve --mode development --open --hot\\",\\r\\n\\"build\\": \\"webpack --mode production\\"\\r\\n```\\r\\n\\r\\nNow your package.json will look like this:\\r\\n\\r\\n![packageJson](../static/img/packageJson.png \\"packageJson\\")\\r\\n\\r\\n## Creating a React Component\\r\\n\\r\\nNow let\u2019s add a simple hello world component in your application. Your index.js and index.html files will look like this:\\r\\n\\r\\n```jsx\\r\\n//index.js\\r\\n\\r\\nimport React from \\"react\\";\\r\\nimport ReactDOM from \\"react-dom\\";\\r\\n\\r\\nconst App = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <h1>Hello!!</h1>\\r\\n      <h2>Welcome to your First React App..!</h2>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nReactDOM.render(<App />, document.getElementById(\\"root\\"));\\r\\n```\\r\\n```html\\r\\n\x3c!-- index.html --\x3e\\r\\n\\r\\n<!DOCTYPE html>\\r\\n<html lang = \\"en\\">\\r\\n   <head>\\r\\n      <meta charset = \\"UTF-8\\">\\r\\n      <title>React Web</title>\\r\\n   </head>\\r\\n   <body>\\r\\n      <div id = \\"root\\"></div>\\r\\n      <script src = \'bundle.js\'><\/script>\\r\\n   </body>\\r\\n</html>\\r\\n```\\r\\n\\r\\n## Run the app\\r\\n\\r\\nI\u2019m very excited to run our application and check if it is working properly. Run below command and it will open your application in browser.\\r\\n\\r\\n```cmd\\r\\nnpm start\\r\\n```\\r\\nYour application will open at http://localhost:8080/\\r\\n\\r\\n![runReactApp](../static/img/runReactApp.png \\"runReactApp\\")\\r\\n\\r\\nTo generate the production bundle you should run below command.\\r\\n\\r\\n```cmd\\r\\nnpm run build\\r\\n```\\r\\n\\r\\nAbove command will create a dist folder and inside that it will create two files called bundle.js and index.html which are production ready files.\\r\\n\\r\\nCongratulations!! You have successfully configured your react application with Webpack and Babel.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nIn this blog we understood the use of webpack, babel and how to develop a react application by configuring webpack and babel.\\r\\n\\r\\n>Thanks for reading this blog post. Hope it\u2019s been useful for you.\\r\\n If you found this article useful, please share it with your friends and colleagues!\u2764\ufe0f\\r\\n\\r\\n This article was originally published [here](https://dev.to/shivampawar/setup-webpack-and-babel-for-a-react-js-application-24f5)"},{"id":"replaceAll-in-javascript","metadata":{"permalink":"/sptechblogs/blog/replaceAll-in-javascript","editUrl":"https://github.com/shivam-pawar/sptechblogs/tree/master/blog/2022-04-16-replaceAll-In-JavaScript.md","source":"@site/blog/2022-04-16-replaceAll-In-JavaScript.md","title":"FIX - replaceAll() is not a Function In JavaScript","description":"Learn how to fix the \\"replaceAll() is not a function\\" error in JavaScript by understanding its cause and implementing a workaround using the replace() method.","date":"2022-04-16T00:00:00.000Z","formattedDate":"April 16, 2022","tags":[{"label":"JavaScript","permalink":"/sptechblogs/blog/tags/java-script"},{"label":"node","permalink":"/sptechblogs/blog/tags/node"},{"label":"alternative","permalink":"/sptechblogs/blog/tags/alternative"},{"label":"programming","permalink":"/sptechblogs/blog/tags/programming"}],"readingTime":1.435,"hasTruncateMarker":true,"authors":[{"name":"Shivam Pawar","title":"Senior Software Developer @Emtec Inc.","url":"https://github.com/shivam-pawar/","imageURL":"https://github.com/shivam-pawar.png","key":"shivam-pawar"}],"frontMatter":{"slug":"replaceAll-in-javascript","title":"FIX - replaceAll() is not a Function In JavaScript","description":"Learn how to fix the \\"replaceAll() is not a function\\" error in JavaScript by understanding its cause and implementing a workaround using the replace() method.","authors":"shivam-pawar","tags":["JavaScript","node","alternative","programming"]},"prevItem":{"title":"Setup Webpack And Babel for a React JS Application","permalink":"/sptechblogs/blog/setup-react-app-babel-webpack"}},"content":"## Why is this error occurring?\\r\\n\\r\\nYou will get error something like this: TypeError: replaceAll is not a function while using replaceAll() function because whatever version of node js or browser does not support this function.\\r\\n\x3c!--truncate--\x3e\\r\\nreplaceAll method was added es2012 or es12 so if you are using ECMAScript version below 12 then definitely you will see this error as there is not implementation for replaceAll in earlier versions.\\r\\n\\r\\n## How To Fix thee Issue?\u200b\\r\\n\\r\\nAs a workaround for this problem, you can use replace() method with a regular expression that has the global (\u201cg\u201d) flag set which had a strong support for all ES version and browsers.\\r\\n\\r\\nLets try with an example:\\r\\n\\r\\nBelow example will replace all whitespaces(\u201d \u201c) with hyphen \u201c-\u201c.\\r\\n\\r\\n```javascript\\r\\nfunction testReplace(sentence) {\\r\\n  return sentence.replace(/[\\" \\"]/g, \\"-\\");\\r\\n}\\r\\n\\r\\nconsole.log(testReplace(\\"This is Test\\"));\\r\\n```\\r\\n\\r\\n## What if you need to use replaceAll() at multiple places?\\r\\n\\r\\nAlternatively, You can create a function which will resemble the behavior of replaceAll() method.\\r\\n\\r\\nLike in this example:\\r\\n\\r\\n```javascript\\r\\nfunction someFunction(blogName) {\\r\\n  return replaceAll(blogName, /[\\" \\"]/g, \\"-\\");\\r\\n}\\r\\n\\r\\n\\r\\nfunction replaceAll(sentence, regx, replaceBy) {\\r\\n  return sentence.replace(regx, replaceBy);\\r\\n}\\r\\n\\r\\nconsole.log(someFunction(\\"This is my blog\\"));\\r\\n```\\r\\n\\r\\nNow you are good to use replaceAll() method anywhere but with different implementation. Note that we are passing 3 parameters to our replaceAll() method which is different than the actual replaceAll() method but both will give desired output.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nThere is no implementation of replaceAll() present in version of ECMAScript12 that\u2019s why we get this error. To fix this, we had a workaround which will use replace() method to do exact thing which replaceAll() does.\\r\\n\\r\\n> If you found this article useful, please share it with your friends and colleagues!\u2764\ufe0f\\r\\n\\r\\nThis article was originally published [here](https://dev.to/shivampawar/fix-replaceall-is-not-a-function-in-javascript-3klp)"}]}')}}]);