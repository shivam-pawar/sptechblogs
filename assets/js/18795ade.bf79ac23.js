"use strict";(self.webpackChunksptechblogs=self.webpackChunksptechblogs||[]).push([[9748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(k,p(p({ref:t},c),{},{components:n})):a.createElement(k,p({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={slug:"practice-javascript-for-interview",title:"Practice JavaScript for Interview",description:"A comprehensive guide to practicing JavaScript concepts, techniques, and problem-solving strategies for coding interviews. This guide is designed to help developers strengthen their understanding of JavaScript fundamentals, advanced topics, and common interview patterns.",authors:"shivam-pawar",image:"../static/img/JavaScript-logo.png",tags:["javascript","interview-prep","coding"]},p="Practice JavaScript for Interview",i={permalink:"/sptechblogs/blog/practice-javascript-for-interview",editUrl:"https://github.com/shivam-pawar/sptechblogs/tree/master/blog/2025-04-12-practice-javascript-for-interview.md",source:"@site/blog/2025-04-12-practice-javascript-for-interview.md",title:"Practice JavaScript for Interview",description:"A comprehensive guide to practicing JavaScript concepts, techniques, and problem-solving strategies for coding interviews. This guide is designed to help developers strengthen their understanding of JavaScript fundamentals, advanced topics, and common interview patterns.",date:"2025-04-12T00:00:00.000Z",formattedDate:"April 12, 2025",tags:[{label:"javascript",permalink:"/sptechblogs/blog/tags/javascript"},{label:"interview-prep",permalink:"/sptechblogs/blog/tags/interview-prep"},{label:"coding",permalink:"/sptechblogs/blog/tags/coding"}],readingTime:10.595,hasTruncateMarker:!0,authors:[{name:"Shivam Pawar",title:"Senior Software Developer @Bridgenext",url:"https://github.com/shivam-pawar/",socials:{github:"shivam-pawar",linkedin:"shivam-prakash-pawar"},imageURL:"https://github.com/shivam-pawar.png",key:"shivam-pawar"}],frontMatter:{slug:"practice-javascript-for-interview",title:"Practice JavaScript for Interview",description:"A comprehensive guide to practicing JavaScript concepts, techniques, and problem-solving strategies for coding interviews. This guide is designed to help developers strengthen their understanding of JavaScript fundamentals, advanced topics, and common interview patterns.",authors:"shivam-pawar",image:"../static/img/JavaScript-logo.png",tags:["javascript","interview-prep","coding"]},nextItem:{title:"How to Publish Your React App on Azure Static Web App Using Azure CI/CD",permalink:"/sptechblogs/blog/publish-react-app-to-azure-static-web-app-using-azure-devops"}},l={authorsImageUrls:[void 0]},s=[{value:"Basic Concepts",id:"basic-concepts",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"JavaScript is one of the most popular programming languages, widely used for web development, server-side scripting, and even mobile app development. Preparing for JavaScript-related interview questions can help you strengthen your understanding of core concepts and improve your problem-solving skills."),(0,r.kt)("p",null,"In this guide, we will cover essential JavaScript topics and provide examples to help you practice effectively."),(0,r.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What is JavaScript?"),(0,r.kt)("p",null,"  JavaScript is a ",(0,r.kt)("strong",{parentName:"p"},"lightweight"),", ",(0,r.kt)("strong",{parentName:"p"},"interpreted")," scripting language primarily used for creating ",(0,r.kt)("strong",{parentName:"p"},"interactive web pages"),"."),(0,r.kt)("p",null,"  It is ",(0,r.kt)("strong",{parentName:"p"},"single-threaded")," with asynchronous capabilities using callbacks, promises, and ",(0,r.kt)("strong",{parentName:"p"},"async/await"),".")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What are the different data types in JavaScript?"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"Primitive types: ",(0,r.kt)("code",null,"String"),", ",(0,r.kt)("code",null,"Number"),", ",(0,r.kt)("code",null,"Boolean"),", ",(0,r.kt)("code",null,"Null"),", ",(0,r.kt)("code",null,"Undefined"),", ",(0,r.kt)("code",null,"Symbol"),", ",(0,r.kt)("code",null,"BigInt"),"."),(0,r.kt)("li",null,"Non-primitive: ",(0,r.kt)("code",null,"Object")," (including Arrays and Functions)."))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What is Hoisting?"),(0,r.kt)("p",null,"  Hoisting is a JavaScript mechanism where variables and functions are moved to the top of their containing scope (either function or global scope) during the compilation phase, before the code is executed."),(0,r.kt)("p",null,"  This means you can use certain variables and functions before they are actually declared in the code."),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Function Hoisting"),"  "),(0,r.kt)("p",null,"  Function declarations are hoisted with their full definition, so they can be called before they're written in the code. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'sayHello(); // Output: Hello!\n\nfunction sayHello() {\n  console.log("Hello!");\n}\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Variable Hoisting - ",(0,r.kt)("inlineCode",{parentName:"strong"},"var")),"  "),(0,r.kt)("p",null,"  ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," declarations are hoisted, but only the declaration, not the initialization. Its value remains ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," until the assignment is reached."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(x); // Output: undefined\nvar x = 10;\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Variable Hoisting - ",(0,r.kt)("inlineCode",{parentName:"strong"},"let")," or ",(0,r.kt)("inlineCode",{parentName:"strong"},"const")),"  "),(0,r.kt)("p",null,"  ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," are also hoisted, but they are in the ",(0,r.kt)("strong",{parentName:"p"},"Temporal Dead Zone (TDZ)")," from the start of the block until the declaration is encountered, so accessing them before that throws an error (",(0,r.kt)("inlineCode",{parentName:"p"},"ReferenceError"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(y); // \u274c ReferenceError: Cannot access 'y' before initialization.\nlet y = 20;\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What are var, let, and const?"),(0,r.kt)("p",null,"  These are the three ways to declare variables in JavaScript:"),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"var")),(0,r.kt)("br",{parentName:"p"}),"\n","Function-scoped.",(0,r.kt)("br",{parentName:"p"}),"\n","Can be re-declared and updated.",(0,r.kt)("br",{parentName:"p"}),"\n","Hoisted but initialized with ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Not recommended due to potential scoping issues.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"var x = 10;\nconsole.log(x); // Output: 10\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"let")),(0,r.kt)("br",{parentName:"p"}),"\n","Block-scoped.",(0,r.kt)("br",{parentName:"p"}),"\n","Cannot be re-declared in the same scope but can be updated.",(0,r.kt)("br",{parentName:"p"}),"\n","Hoisted but in the Temporal Dead Zone (TDZ) until declared."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let y = 20;\ny = 30; // Allowed\nconsole.log(y); // Output: 30\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"const")),(0,r.kt)("br",{parentName:"p"}),"\n","Block-scoped.",(0,r.kt)("br",{parentName:"p"}),"\n","Cannot be re-declared or updated (immutable reference).",(0,r.kt)("br",{parentName:"p"}),"\n","Hoisted but in the Temporal Dead Zone (TDZ) until declared."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const z = 40;\n// z = 50; // \u274c TypeError: Assignment to constant variable.\nconsole.log(z); // Output: 40\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Key Differences"),(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," for variables that will change.",(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," for variables that won't change.",(0,r.kt)("br",{parentName:"p"}),"\n","Avoid ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," unless necessary for legacy code.  ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What is the difference between == and ===?"),'**`==` (Equality Operator)** Compares two values for equality after converting both values to a common type (`type coercion`). ```javascript console.log(5 == "5"); // Output: true console.log(null == undefined); // Output: true ```',(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"===")," (Strict Equality Operator)"),(0,r.kt)("br",{parentName:"p"}),"\n","Compares two values for equality without performing ",(0,r.kt)("inlineCode",{parentName:"p"},"type coercion"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Both the value and the type must be the same.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(5 === "5"); // Output: false\nconsole.log(null === undefined); // Output: false\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Key Difference"),(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"===")," to avoid unexpected results caused by type coercion.",(0,r.kt)("br",{parentName:"p"}),"\n","Prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"===")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," for stricter and more predictable comparisons.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What is the difference between null and undefined?"),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"null")),(0,r.kt)("br",{parentName:"p"}),"\n","Represents the intentional absence of any object value.",(0,r.kt)("br",{parentName:"p"}),"\n",'It is an assignment value that can be explicitly set to indicate "no value."  '),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let a = null;\nconsole.log(a); // Output: null\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"undefined")),(0,r.kt)("br",{parentName:"p"}),"\n","Represents a variable that has been declared but not yet assigned a value.",(0,r.kt)("br",{parentName:"p"}),"\n","It is the default value for uninitialized variables.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let b;\nconsole.log(b); // Output: undefined\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Key Differences"),(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("inlineCode",{parentName:"p"},"null")," is an object, while ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," is a type.",(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("inlineCode",{parentName:"p"},"null")," must be explicitly assigned, whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," is the default state of uninitialized variables.",(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),' when you want to explicitly indicate "no value."',(0,r.kt)("br",{parentName:"p"}),"\n","Avoid assigning ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," manually; let JavaScript handle it."),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Comparison"),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(null == undefined); // Output: true (loose equality)\nconsole.log(null === undefined); // Output: false (strict equality)\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"How to check type of a variable?"),(0,r.kt)("p",null,"You can check the type of a variable in JavaScript using the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeof")," operator. It returns a string indicating the type of the operand."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples"),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(typeof "Hello"); // Output: "string"\nconsole.log(typeof 42); // Output: "number"\nconsole.log(typeof true); // Output: "boolean"\nconsole.log(typeof undefined); // Output: "undefined"\nconsole.log(typeof null); // Output: "object" \nconsole.log(typeof {}); // Output: "object"\nconsole.log(typeof []); // Output: "object" // Arrays are also objects\nconsole.log(typeof function() {}); // Output: "function"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Special Cases"),(0,r.kt)("br",{parentName:"p"}),"\n","",(0,r.kt)("inlineCode",{parentName:"p"},"null")," is considered an object due to a bug in the initial implementation of JavaScript. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"x === null")," to check for ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," explicitly.",(0,r.kt)("br",{parentName:"p"}),"\n","To differentiate between arrays and objects, use ",(0,r.kt)("inlineCode",{parentName:"p"},"Array.isArray()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(Array.isArray([])); // Output: true\nconsole.log(Array.isArray({})); // Output: false\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Best Practices"),(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"typeof")," for primitive types.",(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Array.isArray()")," to check for arrays.",(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceof")," to check for specific object types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log([] instanceof Array); // Output: true\nconsole.log({} instanceof Object); // Output: true\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What are the different ways to declare a function?"),(0,r.kt)("p",null,"  JavaScript provides several ways to declare functions:"),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"1. Function Declaration"),(0,r.kt)("br",{parentName:"p"}),"\n","A named function that can be called before its declaration due to hoisting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function greet() {\n  console.log("Hello!");\n}\ngreet(); // Output: Hello!\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"2. Function Expression"),(0,r.kt)("br",{parentName:"p"}),"\n","A function assigned to a variable. It is not hoisted, so it cannot be called before its definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const greet = function() {\n  console.log("Hello!");\n};\ngreet(); // Output: Hello!\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"3. Arrow Function"),(0,r.kt)("br",{parentName:"p"}),"\n","A concise syntax introduced in ES6. It does not have its own ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const greet = () => {\n  console.log("Hello!");\n};\ngreet(); // Output: Hello!\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"4. Immediately Invoked Function Expression (IIFE)"),(0,r.kt)("br",{parentName:"p"}),"\n","A function that is executed immediately after its definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'(function() {\n  console.log("Hello!");\n})(); // Output: Hello!\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"5. Constructor Function"),(0,r.kt)("br",{parentName:"p"}),"\n","A function used to create objects. It is invoked using the ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," keyword."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function Person(name) {\n  this.name = name;\n}\nconst person = new Person("John");\nconsole.log(person.name); // Output: John\n')),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"6. Generator Function"),(0,r.kt)("br",{parentName:"p"}),"\n","A function that can pause and resume its execution using the ",(0,r.kt)("inlineCode",{parentName:"p"},"yield")," keyword."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nconst gen = generator();\nconsole.log(gen.next().value); // Output: 1\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Key Differences"),(0,r.kt)("br",{parentName:"p"}),"\n","Use function declarations for reusable named functions.",(0,r.kt)("br",{parentName:"p"}),"\n","Use function expressions or arrow functions for inline or callback functions.",(0,r.kt)("br",{parentName:"p"}),"\n","Use IIFE for code that needs to run immediately.",(0,r.kt)("br",{parentName:"p"}),"\n","Use constructor functions or classes for object creation.",(0,r.kt)("br",{parentName:"p"}),"\n","Use generator functions for managing asynchronous or iterative processes.  ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"What are different types of loops?"),(0,r.kt)("p",null,"  JavaScript provides several types of loops to iterate over data or execute a block of code multiple times:"),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"1. ",(0,r.kt)("inlineCode",{parentName:"strong"},"for")," Loop"),(0,r.kt)("br",{parentName:"p"}),"\n","Used when the number of iterations is known beforehand."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 0; i < 5; i++) {\n  console.log(i); // Output: 0, 1, 2, 3, 4\n}\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"2. ",(0,r.kt)("inlineCode",{parentName:"strong"},"while")," Loop"),(0,r.kt)("br",{parentName:"p"}),"\n","Executes as long as the condition is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Use when the number of iterations is not known."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let i = 0;\nwhile (i < 5) {\n  console.log(i); // Output: 0, 1, 2, 3, 4\n  i++;\n}\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"3. ",(0,r.kt)("inlineCode",{parentName:"strong"},"do...while")," Loop"),(0,r.kt)("br",{parentName:"p"}),"\n","Executes the block at least once before checking the condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let i = 0;\ndo {\n  console.log(i); // Output: 0, 1, 2, 3, 4\n  i++;\n} while (i < 5);\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"4. ",(0,r.kt)("inlineCode",{parentName:"strong"},"for...in")," Loop"),(0,r.kt)("br",{parentName:"p"}),"\n","Iterates over the enumerable properties of an object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const obj = { a: 1, b: 2, c: 3 };\nfor (let key in obj) {\n  console.log(key, obj[key]); // Output: a 1, b 2, c 3\n}\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"5. ",(0,r.kt)("inlineCode",{parentName:"strong"},"for...of")," Loop"),(0,r.kt)("br",{parentName:"p"}),"\n","Iterates over iterable objects like arrays, strings, or sets."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [10, 20, 30];\nfor (let value of arr) {\n  console.log(value); // Output: 10, 20, 30\n}\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"6. ",(0,r.kt)("inlineCode",{parentName:"strong"},"break")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"continue")," Statements"),"  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"break"),": Exits the loop immediately.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"continue"),": Skips the current iteration and moves to the next one."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i = 0; i < 5; i++) {\n  if (i === 3) break; // Stops the loop when i is 3\n  console.log(i); // Output: 0, 1, 2\n}\n\nfor (let i = 0; i < 5; i++) {\n  if (i === 3) continue; // Skips the iteration when i is 3\n  console.log(i); // Output: 0, 1, 2, 4\n}\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Key Differences"),"  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," when the number of iterations is known.  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"do...while")," when the number of iterations is unknown.  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"for...in")," for objects and ",(0,r.kt)("inlineCode",{parentName:"p"},"for...of")," for arrays or other iterables.")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Common array methods?"),(0,r.kt)("p",null,"  JavaScript provides a variety of methods to work with arrays. Here are some commonly used ones:"),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"1. ",(0,r.kt)("inlineCode",{parentName:"strong"},"push()")),(0,r.kt)("br",{parentName:"p"}),"\n","Adds one or more elements to the end of an array and returns the new length of the array.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr); // Output: [1, 2, 3, 4]\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"2. ",(0,r.kt)("inlineCode",{parentName:"strong"},"pop()")),(0,r.kt)("br",{parentName:"p"}),"\n","Removes the last element from an array and returns it.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\nconst last = arr.pop();\nconsole.log(last); // Output: 3\nconsole.log(arr); // Output: [1, 2]\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"3. ",(0,r.kt)("inlineCode",{parentName:"strong"},"shift()")),(0,r.kt)("br",{parentName:"p"}),"\n","Removes the first element from an array and returns it.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\nconst first = arr.shift();\nconsole.log(first); // Output: 1\nconsole.log(arr); // Output: [2, 3]\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"4. ",(0,r.kt)("inlineCode",{parentName:"strong"},"unshift()")),(0,r.kt)("br",{parentName:"p"}),"\n","Adds one or more elements to the beginning of an array and returns the new length of the array.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [2, 3];\narr.unshift(1);\nconsole.log(arr); // Output: [1, 2, 3]\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"5. ",(0,r.kt)("inlineCode",{parentName:"strong"},"slice()")),(0,r.kt)("br",{parentName:"p"}),"\n","Returns a shallow copy of a portion of an array into a new array.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3, 4];\nconst sliced = arr.slice(1, 3);\nconsole.log(sliced); // Output: [2, 3]\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"6. ",(0,r.kt)("inlineCode",{parentName:"strong"},"splice()")),(0,r.kt)("br",{parentName:"p"}),"\n","Adds, removes, or replaces elements in an array.  "),(0,r.kt)("p",null,"  ",(0,r.kt)("strong",{parentName:"p"},"Syntax"),"  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"array.splice(start, deleteCount, item1, item2, ...);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"start"),": Index at which to start changing the array.  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"deleteCount"),": Number of elements to remove.  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"item1, item2, ..."),": Elements to add (optional).  "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Example"),"  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const arr = [1, 2, 3, 4];\narr.splice(1, 2, "a", "b");\nconsole.log(arr); // Output: [1, "a", "b", 4]\n')),(0,r.kt)("p",{parentName:"li"},'In this example, 2 elements starting from index 1 are removed, and "a" and "b" are added in their place.'),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"7. ",(0,r.kt)("inlineCode",{parentName:"strong"},"concat()")),(0,r.kt)("br",{parentName:"p"}),"\n","Merges two or more arrays into a new array.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // Output: [1, 2, 3, 4]\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"8. ",(0,r.kt)("inlineCode",{parentName:"strong"},"indexOf()")),(0,r.kt)("br",{parentName:"p"}),"\n","Returns the first index of a specified element, or ",(0,r.kt)("inlineCode",{parentName:"p"},"-1")," if not found.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\nconsole.log(arr.indexOf(2)); // Output: 1\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"9. ",(0,r.kt)("inlineCode",{parentName:"strong"},"includes()")),(0,r.kt)("br",{parentName:"p"}),"\n","Checks if an array contains a specified element.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\nconsole.log(arr.includes(2)); // Output: true\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"10. ",(0,r.kt)("inlineCode",{parentName:"strong"},"forEach()")),(0,r.kt)("br",{parentName:"p"}),"\n","Executes a provided function once for each array element.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\narr.forEach((num) => console.log(num)); // Output: 1, 2, 3\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"11. ",(0,r.kt)("inlineCode",{parentName:"strong"},"map()")),(0,r.kt)("br",{parentName:"p"}),"\n","Creates a new array by applying a function to each element.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\nconst doubled = arr.map((num) => num * 2);\nconsole.log(doubled); // Output: [2, 4, 6]\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"12. ",(0,r.kt)("inlineCode",{parentName:"strong"},"filter()")),(0,r.kt)("br",{parentName:"p"}),"\n","Creates a new array with elements that pass a test.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3, 4];\nconst even = arr.filter((num) => num % 2 === 0);\nconsole.log(even); // Output: [2, 4]\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"13. ",(0,r.kt)("inlineCode",{parentName:"strong"},"reduce()")),(0,r.kt)("br",{parentName:"p"}),"\n","Reduces an array to a single value by applying a function.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3, 4];\nconst sum = arr.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // Output: 10\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"14. ",(0,r.kt)("inlineCode",{parentName:"strong"},"find()")),(0,r.kt)("br",{parentName:"p"}),"\n","Returns the first element that satisfies a condition.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3, 4];\nconst found = arr.find((num) => num > 2);\nconsole.log(found); // Output: 3\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"15. ",(0,r.kt)("inlineCode",{parentName:"strong"},"findIndex()")),(0,r.kt)("br",{parentName:"p"}),"\n","Returns the index of the first element that satisfies a condition.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3, 4];\nconst index = arr.findIndex((num) => num > 2);\nconsole.log(index); // Output: 2\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"16. ",(0,r.kt)("inlineCode",{parentName:"strong"},"sort()")),(0,r.kt)("br",{parentName:"p"}),"\n","Sorts the elements of an array in place.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [3, 1, 4, 2];\narr.sort();\nconsole.log(arr); // Output: [1, 2, 3, 4]\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"17. ",(0,r.kt)("inlineCode",{parentName:"strong"},"reverse()")),(0,r.kt)("br",{parentName:"p"}),"\n","Reverses the order of elements in an array.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3];\narr.reverse();\nconsole.log(arr); // Output: [3, 2, 1]\n")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"18. ",(0,r.kt)("inlineCode",{parentName:"strong"},"join()")),(0,r.kt)("br",{parentName:"p"}),"\n","Joins all elements of an array into a string.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const arr = [1, 2, 3];\nconst str = arr.join("-");\nconsole.log(str); // Output: "1-2-3"\n')),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"19. ",(0,r.kt)("inlineCode",{parentName:"strong"},"split()")),(0,r.kt)("br",{parentName:"p"}),"\n","Although not an array method, ",(0,r.kt)("inlineCode",{parentName:"p"},"split()")," is often used with strings to create arrays.  "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const str = "1,2,3";\nconst arr = str.split(",");\nconsole.log(arr); // Output: ["1", "2", "3"]\n')),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Key Differences"),"  ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"map()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()")," for functional programming.    ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"push()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pop()")," for stack-like behavior.    ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"sort()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reverse()")," for ordering elements.")))))}u.isMDXComponent=!0}}]);